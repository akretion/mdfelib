#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Mar 20 04:00:46 2018 by generateDS.py version 2.28b.
# Python 3.5.2 (default, Sep 14 2017, 22:51:06)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('--no-process-includes', '')
#   ('-o', 'mdfelib/v3_00/mdfeModalAquaviario.py')
#
# Command line arguments:
#   schemas/v3_00/mdfeModalAquaviario_v3.00.xsd
#
# Command line:
#   /usr/local/bin/generateDS --no-process-includes -o "mdfelib/v3_00/mdfeModalAquaviario.py" schemas/v3_00/mdfeModalAquaviario_v3.00.xsd
#
# Current working directory (os.getcwd()):
#   mdfelib
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class aquav(GeneratedsSuper):
    """Informações do modal Aquaviário"""
    subclass = None
    superclass = None
    def __init__(self, irin=None, tpEmb=None, cEmbar=None, xEmbar=None, nViag=None, cPrtEmb=None, cPrtDest=None, prtTrans=None, tpNav=None, infTermCarreg=None, infTermDescarreg=None, infEmbComb=None, infUnidCargaVazia=None, infUnidTranspVazia=None):
        self.original_tagname_ = None
        self.irin = irin
        self.tpEmb = tpEmb
        self.cEmbar = cEmbar
        self.xEmbar = xEmbar
        self.nViag = nViag
        self.cPrtEmb = cPrtEmb
        self.cPrtDest = cPrtDest
        self.prtTrans = prtTrans
        self.tpNav = tpNav
        if infTermCarreg is None:
            self.infTermCarreg = []
        else:
            self.infTermCarreg = infTermCarreg
        if infTermDescarreg is None:
            self.infTermDescarreg = []
        else:
            self.infTermDescarreg = infTermDescarreg
        if infEmbComb is None:
            self.infEmbComb = []
        else:
            self.infEmbComb = infEmbComb
        if infUnidCargaVazia is None:
            self.infUnidCargaVazia = []
        else:
            self.infUnidCargaVazia = infUnidCargaVazia
        if infUnidTranspVazia is None:
            self.infUnidTranspVazia = []
        else:
            self.infUnidTranspVazia = infUnidTranspVazia
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, aquav)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if aquav.subclass:
            return aquav.subclass(*args_, **kwargs_)
        else:
            return aquav(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_irin(self): return self.irin
    def set_irin(self, irin): self.irin = irin
    def get_tpEmb(self): return self.tpEmb
    def set_tpEmb(self, tpEmb): self.tpEmb = tpEmb
    def get_cEmbar(self): return self.cEmbar
    def set_cEmbar(self, cEmbar): self.cEmbar = cEmbar
    def get_xEmbar(self): return self.xEmbar
    def set_xEmbar(self, xEmbar): self.xEmbar = xEmbar
    def get_nViag(self): return self.nViag
    def set_nViag(self, nViag): self.nViag = nViag
    def get_cPrtEmb(self): return self.cPrtEmb
    def set_cPrtEmb(self, cPrtEmb): self.cPrtEmb = cPrtEmb
    def get_cPrtDest(self): return self.cPrtDest
    def set_cPrtDest(self, cPrtDest): self.cPrtDest = cPrtDest
    def get_prtTrans(self): return self.prtTrans
    def set_prtTrans(self, prtTrans): self.prtTrans = prtTrans
    def get_tpNav(self): return self.tpNav
    def set_tpNav(self, tpNav): self.tpNav = tpNav
    def get_infTermCarreg(self): return self.infTermCarreg
    def set_infTermCarreg(self, infTermCarreg): self.infTermCarreg = infTermCarreg
    def add_infTermCarreg(self, value): self.infTermCarreg.append(value)
    def insert_infTermCarreg_at(self, index, value): self.infTermCarreg.insert(index, value)
    def replace_infTermCarreg_at(self, index, value): self.infTermCarreg[index] = value
    def get_infTermDescarreg(self): return self.infTermDescarreg
    def set_infTermDescarreg(self, infTermDescarreg): self.infTermDescarreg = infTermDescarreg
    def add_infTermDescarreg(self, value): self.infTermDescarreg.append(value)
    def insert_infTermDescarreg_at(self, index, value): self.infTermDescarreg.insert(index, value)
    def replace_infTermDescarreg_at(self, index, value): self.infTermDescarreg[index] = value
    def get_infEmbComb(self): return self.infEmbComb
    def set_infEmbComb(self, infEmbComb): self.infEmbComb = infEmbComb
    def add_infEmbComb(self, value): self.infEmbComb.append(value)
    def insert_infEmbComb_at(self, index, value): self.infEmbComb.insert(index, value)
    def replace_infEmbComb_at(self, index, value): self.infEmbComb[index] = value
    def get_infUnidCargaVazia(self): return self.infUnidCargaVazia
    def set_infUnidCargaVazia(self, infUnidCargaVazia): self.infUnidCargaVazia = infUnidCargaVazia
    def add_infUnidCargaVazia(self, value): self.infUnidCargaVazia.append(value)
    def insert_infUnidCargaVazia_at(self, index, value): self.infUnidCargaVazia.insert(index, value)
    def replace_infUnidCargaVazia_at(self, index, value): self.infUnidCargaVazia[index] = value
    def get_infUnidTranspVazia(self): return self.infUnidTranspVazia
    def set_infUnidTranspVazia(self, infUnidTranspVazia): self.infUnidTranspVazia = infUnidTranspVazia
    def add_infUnidTranspVazia(self, value): self.infUnidTranspVazia.append(value)
    def insert_infUnidTranspVazia_at(self, index, value): self.infUnidTranspVazia.insert(index, value)
    def replace_infUnidTranspVazia_at(self, index, value): self.infUnidTranspVazia[index] = value
    def hasContent_(self):
        if (
            self.irin is not None or
            self.tpEmb is not None or
            self.cEmbar is not None or
            self.xEmbar is not None or
            self.nViag is not None or
            self.cPrtEmb is not None or
            self.cPrtDest is not None or
            self.prtTrans is not None or
            self.tpNav is not None or
            self.infTermCarreg or
            self.infTermDescarreg or
            self.infEmbComb or
            self.infUnidCargaVazia or
            self.infUnidTranspVazia
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='aquav', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('aquav')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='aquav')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='aquav', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='aquav'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='aquav', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.irin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sirin>%s</%sirin>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.irin), input_name='irin')), namespace_, eol_))
        if self.tpEmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpEmb>%s</%stpEmb>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpEmb), input_name='tpEmb')), namespace_, eol_))
        if self.cEmbar is not None:
            self.cEmbar.export(outfile, level, namespace_, name_='cEmbar', pretty_print=pretty_print)
        if self.xEmbar is not None:
            self.xEmbar.export(outfile, level, namespace_, name_='xEmbar', pretty_print=pretty_print)
        if self.nViag is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snViag>%s</%snViag>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nViag), input_name='nViag')), namespace_, eol_))
        if self.cPrtEmb is not None:
            self.cPrtEmb.export(outfile, level, namespace_, name_='cPrtEmb', pretty_print=pretty_print)
        if self.cPrtDest is not None:
            self.cPrtDest.export(outfile, level, namespace_, name_='cPrtDest', pretty_print=pretty_print)
        if self.prtTrans is not None:
            self.prtTrans.export(outfile, level, namespace_, name_='prtTrans', pretty_print=pretty_print)
        if self.tpNav is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpNav>%s</%stpNav>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpNav), input_name='tpNav')), namespace_, eol_))
        for infTermCarreg_ in self.infTermCarreg:
            infTermCarreg_.export(outfile, level, namespace_, name_='infTermCarreg', pretty_print=pretty_print)
        for infTermDescarreg_ in self.infTermDescarreg:
            infTermDescarreg_.export(outfile, level, namespace_, name_='infTermDescarreg', pretty_print=pretty_print)
        for infEmbComb_ in self.infEmbComb:
            infEmbComb_.export(outfile, level, namespace_, name_='infEmbComb', pretty_print=pretty_print)
        for infUnidCargaVazia_ in self.infUnidCargaVazia:
            infUnidCargaVazia_.export(outfile, level, namespace_, name_='infUnidCargaVazia', pretty_print=pretty_print)
        for infUnidTranspVazia_ in self.infUnidTranspVazia:
            infUnidTranspVazia_.export(outfile, level, namespace_, name_='infUnidTranspVazia', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'irin':
            irin_ = child_.text
            irin_ = self.gds_validate_string(irin_, node, 'irin')
            self.irin = irin_
        elif nodeName_ == 'tpEmb':
            tpEmb_ = child_.text
            tpEmb_ = self.gds_validate_string(tpEmb_, node, 'tpEmb')
            self.tpEmb = tpEmb_
        elif nodeName_ == 'cEmbar':
            obj_ = None
            self.cEmbar = obj_
            obj_.original_tagname_ = 'cEmbar'
        elif nodeName_ == 'xEmbar':
            obj_ = None
            self.xEmbar = obj_
            obj_.original_tagname_ = 'xEmbar'
        elif nodeName_ == 'nViag':
            nViag_ = child_.text
            nViag_ = self.gds_validate_string(nViag_, node, 'nViag')
            self.nViag = nViag_
        elif nodeName_ == 'cPrtEmb':
            obj_ = None
            self.cPrtEmb = obj_
            obj_.original_tagname_ = 'cPrtEmb'
        elif nodeName_ == 'cPrtDest':
            obj_ = None
            self.cPrtDest = obj_
            obj_.original_tagname_ = 'cPrtDest'
        elif nodeName_ == 'prtTrans':
            obj_ = None
            self.prtTrans = obj_
            obj_.original_tagname_ = 'prtTrans'
        elif nodeName_ == 'tpNav':
            tpNav_ = child_.text
            tpNav_ = self.gds_validate_string(tpNav_, node, 'tpNav')
            self.tpNav = tpNav_
        elif nodeName_ == 'infTermCarreg':
            obj_ = infTermCarreg.factory()
            obj_.build(child_)
            self.infTermCarreg.append(obj_)
            obj_.original_tagname_ = 'infTermCarreg'
        elif nodeName_ == 'infTermDescarreg':
            obj_ = infTermDescarreg.factory()
            obj_.build(child_)
            self.infTermDescarreg.append(obj_)
            obj_.original_tagname_ = 'infTermDescarreg'
        elif nodeName_ == 'infEmbComb':
            obj_ = infEmbComb.factory()
            obj_.build(child_)
            self.infEmbComb.append(obj_)
            obj_.original_tagname_ = 'infEmbComb'
        elif nodeName_ == 'infUnidCargaVazia':
            obj_ = infUnidCargaVazia.factory()
            obj_.build(child_)
            self.infUnidCargaVazia.append(obj_)
            obj_.original_tagname_ = 'infUnidCargaVazia'
        elif nodeName_ == 'infUnidTranspVazia':
            obj_ = infUnidTranspVazia.factory()
            obj_.build(child_)
            self.infUnidTranspVazia.append(obj_)
            obj_.original_tagname_ = 'infUnidTranspVazia'
# end class aquav


class irin(GeneratedsSuper):
    """Irin do navio sempre deverá ser informado"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, irin)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if irin.subclass:
            return irin.subclass(*args_, **kwargs_)
        else:
            return irin(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='irin', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('irin')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='irin')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='irin', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='irin'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='irin', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class irin


class tpEmb(GeneratedsSuper):
    """Código do tipo de embarcaçãoPreencher com código da Tabela de Tipo
    de Embarcação definida no Ministério dos Transportes"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpEmb)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpEmb.subclass:
            return tpEmb.subclass(*args_, **kwargs_)
        else:
            return tpEmb(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpEmb', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpEmb')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpEmb')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpEmb', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpEmb'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpEmb', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpEmb


class cEmbar(GeneratedsSuper):
    """Código da embarcação"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cEmbar)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cEmbar.subclass:
            return cEmbar.subclass(*args_, **kwargs_)
        else:
            return cEmbar(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cEmbar', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cEmbar')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cEmbar')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cEmbar', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cEmbar'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cEmbar', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cEmbar


class xEmbar(GeneratedsSuper):
    """Nome da embarcação"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xEmbar)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xEmbar.subclass:
            return xEmbar.subclass(*args_, **kwargs_)
        else:
            return xEmbar(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='xEmbar', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xEmbar')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='xEmbar')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='xEmbar', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xEmbar'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xEmbar', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class xEmbar


class nViag(GeneratedsSuper):
    """Número da Viagem"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nViag)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nViag.subclass:
            return nViag.subclass(*args_, **kwargs_)
        else:
            return nViag(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nViag', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nViag')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nViag')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nViag', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nViag'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nViag', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nViag


class cPrtEmb(GeneratedsSuper):
    """Código do Porto de EmbarquePreencher de acordo com Tabela de Portos
    definida no Ministério dos Transportes"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cPrtEmb)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cPrtEmb.subclass:
            return cPrtEmb.subclass(*args_, **kwargs_)
        else:
            return cPrtEmb(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cPrtEmb', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cPrtEmb')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cPrtEmb')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cPrtEmb', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cPrtEmb'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cPrtEmb', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cPrtEmb


class cPrtDest(GeneratedsSuper):
    """Código do Porto de DestinoPreencher de acordo com Tabela de Portos
    definida no Ministério dos Transportes"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cPrtDest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cPrtDest.subclass:
            return cPrtDest.subclass(*args_, **kwargs_)
        else:
            return cPrtDest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cPrtDest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cPrtDest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cPrtDest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cPrtDest', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cPrtDest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cPrtDest', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cPrtDest


class prtTrans(GeneratedsSuper):
    """Porto de Transbordo"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, prtTrans)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if prtTrans.subclass:
            return prtTrans.subclass(*args_, **kwargs_)
        else:
            return prtTrans(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='prtTrans', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('prtTrans')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prtTrans')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='prtTrans', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='prtTrans'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='prtTrans', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class prtTrans


class tpNav(GeneratedsSuper):
    """Tipo de NavegaçãoPreencher com: 0 - Interior; 1 - Cabotagem"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpNav)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpNav.subclass:
            return tpNav.subclass(*args_, **kwargs_)
        else:
            return tpNav(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpNav', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpNav')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpNav')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpNav', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpNav'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpNav', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpNav


class infTermCarreg(GeneratedsSuper):
    """Grupo de informações dos terminais de carregamento."""
    subclass = None
    superclass = None
    def __init__(self, cTermCarreg=None, xTermCarreg=None):
        self.original_tagname_ = None
        self.cTermCarreg = cTermCarreg
        self.xTermCarreg = xTermCarreg
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infTermCarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infTermCarreg.subclass:
            return infTermCarreg.subclass(*args_, **kwargs_)
        else:
            return infTermCarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cTermCarreg(self): return self.cTermCarreg
    def set_cTermCarreg(self, cTermCarreg): self.cTermCarreg = cTermCarreg
    def get_xTermCarreg(self): return self.xTermCarreg
    def set_xTermCarreg(self, xTermCarreg): self.xTermCarreg = xTermCarreg
    def hasContent_(self):
        if (
            self.cTermCarreg is not None or
            self.xTermCarreg is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infTermCarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infTermCarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infTermCarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infTermCarreg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infTermCarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infTermCarreg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cTermCarreg is not None:
            self.cTermCarreg.export(outfile, level, namespace_, name_='cTermCarreg', pretty_print=pretty_print)
        if self.xTermCarreg is not None:
            self.xTermCarreg.export(outfile, level, namespace_, name_='xTermCarreg', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cTermCarreg':
            obj_ = None
            self.cTermCarreg = obj_
            obj_.original_tagname_ = 'cTermCarreg'
        elif nodeName_ == 'xTermCarreg':
            obj_ = None
            self.xTermCarreg = obj_
            obj_.original_tagname_ = 'xTermCarreg'
# end class infTermCarreg


class cTermCarreg(GeneratedsSuper):
    """Código do Terminal de CarregamentoPreencher de acordo com a Tabela
    de Terminais de Carregamento. O código de cada Porto está
    definido no Ministério de Transportes."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cTermCarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cTermCarreg.subclass:
            return cTermCarreg.subclass(*args_, **kwargs_)
        else:
            return cTermCarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cTermCarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cTermCarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cTermCarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cTermCarreg', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cTermCarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cTermCarreg', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cTermCarreg


class xTermCarreg(GeneratedsSuper):
    """Nome do Terminal de Carregamento"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xTermCarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xTermCarreg.subclass:
            return xTermCarreg.subclass(*args_, **kwargs_)
        else:
            return xTermCarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='xTermCarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xTermCarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='xTermCarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='xTermCarreg', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xTermCarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xTermCarreg', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class xTermCarreg


class infTermDescarreg(GeneratedsSuper):
    """Grupo de informações dos terminais de descarregamento."""
    subclass = None
    superclass = None
    def __init__(self, cTermDescarreg=None, xTermDescarreg=None):
        self.original_tagname_ = None
        self.cTermDescarreg = cTermDescarreg
        self.xTermDescarreg = xTermDescarreg
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infTermDescarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infTermDescarreg.subclass:
            return infTermDescarreg.subclass(*args_, **kwargs_)
        else:
            return infTermDescarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cTermDescarreg(self): return self.cTermDescarreg
    def set_cTermDescarreg(self, cTermDescarreg): self.cTermDescarreg = cTermDescarreg
    def get_xTermDescarreg(self): return self.xTermDescarreg
    def set_xTermDescarreg(self, xTermDescarreg): self.xTermDescarreg = xTermDescarreg
    def hasContent_(self):
        if (
            self.cTermDescarreg is not None or
            self.xTermDescarreg is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infTermDescarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infTermDescarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infTermDescarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infTermDescarreg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infTermDescarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infTermDescarreg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cTermDescarreg is not None:
            self.cTermDescarreg.export(outfile, level, namespace_, name_='cTermDescarreg', pretty_print=pretty_print)
        if self.xTermDescarreg is not None:
            self.xTermDescarreg.export(outfile, level, namespace_, name_='xTermDescarreg', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cTermDescarreg':
            obj_ = None
            self.cTermDescarreg = obj_
            obj_.original_tagname_ = 'cTermDescarreg'
        elif nodeName_ == 'xTermDescarreg':
            obj_ = None
            self.xTermDescarreg = obj_
            obj_.original_tagname_ = 'xTermDescarreg'
# end class infTermDescarreg


class cTermDescarreg(GeneratedsSuper):
    """Código do Terminal de DescarregamentoPreencher de acordo com a
    Tabela de Terminais de Descarregamento. O código de cada Porto
    está definido no Ministério de Transportes."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cTermDescarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cTermDescarreg.subclass:
            return cTermDescarreg.subclass(*args_, **kwargs_)
        else:
            return cTermDescarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cTermDescarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cTermDescarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cTermDescarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cTermDescarreg', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cTermDescarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cTermDescarreg', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cTermDescarreg


class xTermDescarreg(GeneratedsSuper):
    """Nome do Terminal de Descarregamento"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xTermDescarreg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xTermDescarreg.subclass:
            return xTermDescarreg.subclass(*args_, **kwargs_)
        else:
            return xTermDescarreg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='xTermDescarreg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xTermDescarreg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='xTermDescarreg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='xTermDescarreg', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xTermDescarreg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xTermDescarreg', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class xTermDescarreg


class infEmbComb(GeneratedsSuper):
    """Informações das Embarcações do Comboio"""
    subclass = None
    superclass = None
    def __init__(self, cEmbComb=None, xBalsa=None):
        self.original_tagname_ = None
        self.cEmbComb = cEmbComb
        self.xBalsa = xBalsa
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infEmbComb)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infEmbComb.subclass:
            return infEmbComb.subclass(*args_, **kwargs_)
        else:
            return infEmbComb(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cEmbComb(self): return self.cEmbComb
    def set_cEmbComb(self, cEmbComb): self.cEmbComb = cEmbComb
    def get_xBalsa(self): return self.xBalsa
    def set_xBalsa(self, xBalsa): self.xBalsa = xBalsa
    def hasContent_(self):
        if (
            self.cEmbComb is not None or
            self.xBalsa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infEmbComb', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infEmbComb')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infEmbComb')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infEmbComb', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infEmbComb'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infEmbComb', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cEmbComb is not None:
            self.cEmbComb.export(outfile, level, namespace_, name_='cEmbComb', pretty_print=pretty_print)
        if self.xBalsa is not None:
            self.xBalsa.export(outfile, level, namespace_, name_='xBalsa', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cEmbComb':
            obj_ = None
            self.cEmbComb = obj_
            obj_.original_tagname_ = 'cEmbComb'
        elif nodeName_ == 'xBalsa':
            obj_ = None
            self.xBalsa = obj_
            obj_.original_tagname_ = 'xBalsa'
# end class infEmbComb


class cEmbComb(GeneratedsSuper):
    """Código da embarcação do comboio"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cEmbComb)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cEmbComb.subclass:
            return cEmbComb.subclass(*args_, **kwargs_)
        else:
            return cEmbComb(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cEmbComb', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cEmbComb')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cEmbComb')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cEmbComb', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cEmbComb'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cEmbComb', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cEmbComb


class xBalsa(GeneratedsSuper):
    """Identificador da Balsa"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xBalsa)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xBalsa.subclass:
            return xBalsa.subclass(*args_, **kwargs_)
        else:
            return xBalsa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='xBalsa', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xBalsa')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='xBalsa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='xBalsa', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xBalsa'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xBalsa', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class xBalsa


class infUnidCargaVazia(GeneratedsSuper):
    """Informações das Undades de Carga vazias"""
    subclass = None
    superclass = None
    def __init__(self, idUnidCargaVazia=None, tpUnidCargaVazia=None):
        self.original_tagname_ = None
        self.idUnidCargaVazia = idUnidCargaVazia
        self.tpUnidCargaVazia = tpUnidCargaVazia
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infUnidCargaVazia)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infUnidCargaVazia.subclass:
            return infUnidCargaVazia.subclass(*args_, **kwargs_)
        else:
            return infUnidCargaVazia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_idUnidCargaVazia(self): return self.idUnidCargaVazia
    def set_idUnidCargaVazia(self, idUnidCargaVazia): self.idUnidCargaVazia = idUnidCargaVazia
    def get_tpUnidCargaVazia(self): return self.tpUnidCargaVazia
    def set_tpUnidCargaVazia(self, tpUnidCargaVazia): self.tpUnidCargaVazia = tpUnidCargaVazia
    def hasContent_(self):
        if (
            self.idUnidCargaVazia is not None or
            self.tpUnidCargaVazia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infUnidCargaVazia', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infUnidCargaVazia')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infUnidCargaVazia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infUnidCargaVazia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infUnidCargaVazia'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infUnidCargaVazia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.idUnidCargaVazia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidUnidCargaVazia>%s</%sidUnidCargaVazia>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.idUnidCargaVazia), input_name='idUnidCargaVazia')), namespace_, eol_))
        if self.tpUnidCargaVazia is not None:
            self.tpUnidCargaVazia.export(outfile, level, namespace_, name_='tpUnidCargaVazia', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'idUnidCargaVazia':
            idUnidCargaVazia_ = child_.text
            idUnidCargaVazia_ = self.gds_validate_string(idUnidCargaVazia_, node, 'idUnidCargaVazia')
            self.idUnidCargaVazia = idUnidCargaVazia_
        elif nodeName_ == 'tpUnidCargaVazia':
            obj_ = None
            self.tpUnidCargaVazia = obj_
            obj_.original_tagname_ = 'tpUnidCargaVazia'
# end class infUnidCargaVazia


class tpUnidCargaVazia(GeneratedsSuper):
    """Tipo da unidade de carga vazia1 - Container; 2 - ULD;3 - Pallet;4 -
    Outros;"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpUnidCargaVazia)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpUnidCargaVazia.subclass:
            return tpUnidCargaVazia.subclass(*args_, **kwargs_)
        else:
            return tpUnidCargaVazia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpUnidCargaVazia', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpUnidCargaVazia')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpUnidCargaVazia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpUnidCargaVazia', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpUnidCargaVazia'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpUnidCargaVazia', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpUnidCargaVazia


class infUnidTranspVazia(GeneratedsSuper):
    """Informações das Undades de Transporte vazias"""
    subclass = None
    superclass = None
    def __init__(self, idUnidTranspVazia=None, tpUnidTranspVazia=None):
        self.original_tagname_ = None
        self.idUnidTranspVazia = idUnidTranspVazia
        self.tpUnidTranspVazia = tpUnidTranspVazia
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infUnidTranspVazia)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infUnidTranspVazia.subclass:
            return infUnidTranspVazia.subclass(*args_, **kwargs_)
        else:
            return infUnidTranspVazia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_idUnidTranspVazia(self): return self.idUnidTranspVazia
    def set_idUnidTranspVazia(self, idUnidTranspVazia): self.idUnidTranspVazia = idUnidTranspVazia
    def get_tpUnidTranspVazia(self): return self.tpUnidTranspVazia
    def set_tpUnidTranspVazia(self, tpUnidTranspVazia): self.tpUnidTranspVazia = tpUnidTranspVazia
    def hasContent_(self):
        if (
            self.idUnidTranspVazia is not None or
            self.tpUnidTranspVazia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infUnidTranspVazia', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infUnidTranspVazia')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infUnidTranspVazia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infUnidTranspVazia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infUnidTranspVazia'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infUnidTranspVazia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.idUnidTranspVazia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidUnidTranspVazia>%s</%sidUnidTranspVazia>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.idUnidTranspVazia), input_name='idUnidTranspVazia')), namespace_, eol_))
        if self.tpUnidTranspVazia is not None:
            self.tpUnidTranspVazia.export(outfile, level, namespace_, name_='tpUnidTranspVazia', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'idUnidTranspVazia':
            idUnidTranspVazia_ = child_.text
            idUnidTranspVazia_ = self.gds_validate_string(idUnidTranspVazia_, node, 'idUnidTranspVazia')
            self.idUnidTranspVazia = idUnidTranspVazia_
        elif nodeName_ == 'tpUnidTranspVazia':
            obj_ = None
            self.tpUnidTranspVazia = obj_
            obj_.original_tagname_ = 'tpUnidTranspVazia'
# end class infUnidTranspVazia


class tpUnidTranspVazia(GeneratedsSuper):
    """Tipo da unidade de transporte vaziaDeve ser preenchido com “1” para
    Rodoviário Tração do tipo caminhão ou “2” para Rodoviário
    reboque do tipo carreta"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpUnidTranspVazia)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpUnidTranspVazia.subclass:
            return tpUnidTranspVazia.subclass(*args_, **kwargs_)
        else:
            return tpUnidTranspVazia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpUnidTranspVazia', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpUnidTranspVazia')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpUnidTranspVazia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpUnidTranspVazia', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpUnidTranspVazia'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpUnidTranspVazia', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpUnidTranspVazia


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'aquav'
        rootClass = aquav
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'aquav'
        rootClass = aquav
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'aquav'
        rootClass = aquav
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'aquav'
        rootClass = aquav
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from mdfeModalAquaviario import *\n\n')
        sys.stdout.write('import mdfeModalAquaviario as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "aquav"
]
