#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Mar 20 04:00:47 2018 by generateDS.py version 2.28b.
# Python 3.5.2 (default, Sep 14 2017, 22:51:06)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('--no-process-includes', '')
#   ('-o', 'mdfelib/v3_00/mdfeModalRodoviario.py')
#
# Command line arguments:
#   schemas/v3_00/mdfeModalRodoviario_v3.00.xsd
#
# Command line:
#   /usr/local/bin/generateDS --no-process-includes -o "mdfelib/v3_00/mdfeModalRodoviario.py" schemas/v3_00/mdfeModalRodoviario_v3.00.xsd
#
# Current working directory (os.getcwd()):
#   mdfelib
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class rodo(GeneratedsSuper):
    """Informações do modal Rodoviário"""
    subclass = None
    superclass = None
    def __init__(self, infANTT=None, veicTracao=None, veicReboque=None, codAgPorto=None, lacRodo=None):
        self.original_tagname_ = None
        self.infANTT = infANTT
        self.veicTracao = veicTracao
        if veicReboque is None:
            self.veicReboque = []
        else:
            self.veicReboque = veicReboque
        self.codAgPorto = codAgPorto
        if lacRodo is None:
            self.lacRodo = []
        else:
            self.lacRodo = lacRodo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rodo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rodo.subclass:
            return rodo.subclass(*args_, **kwargs_)
        else:
            return rodo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_infANTT(self): return self.infANTT
    def set_infANTT(self, infANTT): self.infANTT = infANTT
    def get_veicTracao(self): return self.veicTracao
    def set_veicTracao(self, veicTracao): self.veicTracao = veicTracao
    def get_veicReboque(self): return self.veicReboque
    def set_veicReboque(self, veicReboque): self.veicReboque = veicReboque
    def add_veicReboque(self, value): self.veicReboque.append(value)
    def insert_veicReboque_at(self, index, value): self.veicReboque.insert(index, value)
    def replace_veicReboque_at(self, index, value): self.veicReboque[index] = value
    def get_codAgPorto(self): return self.codAgPorto
    def set_codAgPorto(self, codAgPorto): self.codAgPorto = codAgPorto
    def get_lacRodo(self): return self.lacRodo
    def set_lacRodo(self, lacRodo): self.lacRodo = lacRodo
    def add_lacRodo(self, value): self.lacRodo.append(value)
    def insert_lacRodo_at(self, index, value): self.lacRodo.insert(index, value)
    def replace_lacRodo_at(self, index, value): self.lacRodo[index] = value
    def hasContent_(self):
        if (
            self.infANTT is not None or
            self.veicTracao is not None or
            self.veicReboque or
            self.codAgPorto is not None or
            self.lacRodo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='rodo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rodo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rodo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='rodo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='rodo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='rodo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.infANTT is not None:
            self.infANTT.export(outfile, level, namespace_, name_='infANTT', pretty_print=pretty_print)
        if self.veicTracao is not None:
            self.veicTracao.export(outfile, level, namespace_, name_='veicTracao', pretty_print=pretty_print)
        for veicReboque_ in self.veicReboque:
            veicReboque_.export(outfile, level, namespace_, name_='veicReboque', pretty_print=pretty_print)
        if self.codAgPorto is not None:
            self.codAgPorto.export(outfile, level, namespace_, name_='codAgPorto', pretty_print=pretty_print)
        for lacRodo_ in self.lacRodo:
            lacRodo_.export(outfile, level, namespace_, name_='lacRodo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'infANTT':
            obj_ = infANTT.factory()
            obj_.build(child_)
            self.infANTT = obj_
            obj_.original_tagname_ = 'infANTT'
        elif nodeName_ == 'veicTracao':
            obj_ = veicTracao.factory()
            obj_.build(child_)
            self.veicTracao = obj_
            obj_.original_tagname_ = 'veicTracao'
        elif nodeName_ == 'veicReboque':
            obj_ = veicReboque.factory()
            obj_.build(child_)
            self.veicReboque.append(obj_)
            obj_.original_tagname_ = 'veicReboque'
        elif nodeName_ == 'codAgPorto':
            obj_ = None
            self.codAgPorto = obj_
            obj_.original_tagname_ = 'codAgPorto'
        elif nodeName_ == 'lacRodo':
            obj_ = lacRodo.factory()
            obj_.build(child_)
            self.lacRodo.append(obj_)
            obj_.original_tagname_ = 'lacRodo'
# end class rodo


class infANTT(GeneratedsSuper):
    """Grupo de informações para Agência Reguladora"""
    subclass = None
    superclass = None
    def __init__(self, RNTRC=None, infCIOT=None, valePed=None, infContratante=None):
        self.original_tagname_ = None
        self.RNTRC = RNTRC
        self.validate_TRNTRC(self.RNTRC)
        if infCIOT is None:
            self.infCIOT = []
        else:
            self.infCIOT = infCIOT
        self.valePed = valePed
        if infContratante is None:
            self.infContratante = []
        else:
            self.infContratante = infContratante
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infANTT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infANTT.subclass:
            return infANTT.subclass(*args_, **kwargs_)
        else:
            return infANTT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RNTRC(self): return self.RNTRC
    def set_RNTRC(self, RNTRC): self.RNTRC = RNTRC
    def get_infCIOT(self): return self.infCIOT
    def set_infCIOT(self, infCIOT): self.infCIOT = infCIOT
    def add_infCIOT(self, value): self.infCIOT.append(value)
    def insert_infCIOT_at(self, index, value): self.infCIOT.insert(index, value)
    def replace_infCIOT_at(self, index, value): self.infCIOT[index] = value
    def get_valePed(self): return self.valePed
    def set_valePed(self, valePed): self.valePed = valePed
    def get_infContratante(self): return self.infContratante
    def set_infContratante(self, infContratante): self.infContratante = infContratante
    def add_infContratante(self, value): self.infContratante.append(value)
    def insert_infContratante_at(self, index, value): self.infContratante.insert(index, value)
    def replace_infContratante_at(self, index, value): self.infContratante[index] = value
    def validate_TRNTRC(self, value):
        # Validate type TRNTRC, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.RNTRC is not None or
            self.infCIOT or
            self.valePed is not None or
            self.infContratante
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infANTT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infANTT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infANTT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infANTT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infANTT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infANTT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RNTRC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNTRC>%s</%sRNTRC>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RNTRC), input_name='RNTRC')), namespace_, eol_))
        for infCIOT_ in self.infCIOT:
            infCIOT_.export(outfile, level, namespace_, name_='infCIOT', pretty_print=pretty_print)
        if self.valePed is not None:
            self.valePed.export(outfile, level, namespace_, name_='valePed', pretty_print=pretty_print)
        for infContratante_ in self.infContratante:
            infContratante_.export(outfile, level, namespace_, name_='infContratante', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RNTRC':
            RNTRC_ = child_.text
            RNTRC_ = self.gds_validate_string(RNTRC_, node, 'RNTRC')
            self.RNTRC = RNTRC_
            # validate type TRNTRC
            self.validate_TRNTRC(self.RNTRC)
        elif nodeName_ == 'infCIOT':
            obj_ = infCIOT.factory()
            obj_.build(child_)
            self.infCIOT.append(obj_)
            obj_.original_tagname_ = 'infCIOT'
        elif nodeName_ == 'valePed':
            obj_ = valePed.factory()
            obj_.build(child_)
            self.valePed = obj_
            obj_.original_tagname_ = 'valePed'
        elif nodeName_ == 'infContratante':
            obj_ = infContratante.factory()
            obj_.build(child_)
            self.infContratante.append(obj_)
            obj_.original_tagname_ = 'infContratante'
# end class infANTT


class infCIOT(GeneratedsSuper):
    """Dados do CIOT"""
    subclass = None
    superclass = None
    def __init__(self, CIOT=None, CPF=None, CNPJ=None):
        self.original_tagname_ = None
        self.CIOT = CIOT
        self.CPF = CPF
        self.CNPJ = CNPJ
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infCIOT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infCIOT.subclass:
            return infCIOT.subclass(*args_, **kwargs_)
        else:
            return infCIOT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CIOT(self): return self.CIOT
    def set_CIOT(self, CIOT): self.CIOT = CIOT
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def get_CNPJ(self): return self.CNPJ
    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ
    def hasContent_(self):
        if (
            self.CIOT is not None or
            self.CPF is not None or
            self.CNPJ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infCIOT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infCIOT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infCIOT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infCIOT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infCIOT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infCIOT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CIOT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIOT>%s</%sCIOT>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CIOT), input_name='CIOT')), namespace_, eol_))
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespace_, eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CIOT':
            CIOT_ = child_.text
            CIOT_ = self.gds_validate_string(CIOT_, node, 'CIOT')
            self.CIOT = CIOT_
        elif nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
# end class infCIOT


class CIOT(GeneratedsSuper):
    """Código Identificador da Operação de TransporteTambém Conhecido como
    conta frete"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CIOT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CIOT.subclass:
            return CIOT.subclass(*args_, **kwargs_)
        else:
            return CIOT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CIOT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CIOT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CIOT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CIOT', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CIOT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CIOT', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CIOT


class valePed(GeneratedsSuper):
    """Informações de Vale PedágioOutras informações sobre Vale-Pedágio
    obrigatório que não tenham campos específicos devem ser
    informadas no campo de observações gerais de uso livre pelo
    contribuinte, visando atender as determinações legais vigentes."""
    subclass = None
    superclass = None
    def __init__(self, disp=None):
        self.original_tagname_ = None
        if disp is None:
            self.disp = []
        else:
            self.disp = disp
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, valePed)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if valePed.subclass:
            return valePed.subclass(*args_, **kwargs_)
        else:
            return valePed(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_disp(self): return self.disp
    def set_disp(self, disp): self.disp = disp
    def add_disp(self, value): self.disp.append(value)
    def insert_disp_at(self, index, value): self.disp.insert(index, value)
    def replace_disp_at(self, index, value): self.disp[index] = value
    def hasContent_(self):
        if (
            self.disp
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='valePed', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('valePed')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='valePed')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='valePed', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='valePed'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='valePed', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for disp_ in self.disp:
            disp_.export(outfile, level, namespace_, name_='disp', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'disp':
            obj_ = disp.factory()
            obj_.build(child_)
            self.disp.append(obj_)
            obj_.original_tagname_ = 'disp'
# end class valePed


class disp(GeneratedsSuper):
    """Informações dos dispositivos do Vale Pedágio"""
    subclass = None
    superclass = None
    def __init__(self, CNPJForn=None, CNPJPg=None, CPFPg=None, nCompra=None, vValePed=None):
        self.original_tagname_ = None
        self.CNPJForn = CNPJForn
        self.CNPJPg = CNPJPg
        self.CPFPg = CPFPg
        self.nCompra = nCompra
        self.vValePed = vValePed
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, disp)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if disp.subclass:
            return disp.subclass(*args_, **kwargs_)
        else:
            return disp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CNPJForn(self): return self.CNPJForn
    def set_CNPJForn(self, CNPJForn): self.CNPJForn = CNPJForn
    def get_CNPJPg(self): return self.CNPJPg
    def set_CNPJPg(self, CNPJPg): self.CNPJPg = CNPJPg
    def get_CPFPg(self): return self.CPFPg
    def set_CPFPg(self, CPFPg): self.CPFPg = CPFPg
    def get_nCompra(self): return self.nCompra
    def set_nCompra(self, nCompra): self.nCompra = nCompra
    def get_vValePed(self): return self.vValePed
    def set_vValePed(self, vValePed): self.vValePed = vValePed
    def hasContent_(self):
        if (
            self.CNPJForn is not None or
            self.CNPJPg is not None or
            self.CPFPg is not None or
            self.nCompra is not None or
            self.vValePed is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='disp', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('disp')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='disp')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='disp', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='disp'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='disp', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CNPJForn is not None:
            self.CNPJForn.export(outfile, level, namespace_, name_='CNPJForn', pretty_print=pretty_print)
        if self.CNPJPg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJPg>%s</%sCNPJPg>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CNPJPg), input_name='CNPJPg')), namespace_, eol_))
        if self.CPFPg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPFPg>%s</%sCPFPg>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CPFPg), input_name='CPFPg')), namespace_, eol_))
        if self.nCompra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snCompra>%s</%snCompra>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nCompra), input_name='nCompra')), namespace_, eol_))
        if self.vValePed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svValePed>%s</%svValePed>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.vValePed), input_name='vValePed')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CNPJForn':
            obj_ = None
            self.CNPJForn = obj_
            obj_.original_tagname_ = 'CNPJForn'
        elif nodeName_ == 'CNPJPg':
            CNPJPg_ = child_.text
            CNPJPg_ = self.gds_validate_string(CNPJPg_, node, 'CNPJPg')
            self.CNPJPg = CNPJPg_
        elif nodeName_ == 'CPFPg':
            CPFPg_ = child_.text
            CPFPg_ = self.gds_validate_string(CPFPg_, node, 'CPFPg')
            self.CPFPg = CPFPg_
        elif nodeName_ == 'nCompra':
            nCompra_ = child_.text
            nCompra_ = self.gds_validate_string(nCompra_, node, 'nCompra')
            self.nCompra = nCompra_
        elif nodeName_ == 'vValePed':
            vValePed_ = child_.text
            vValePed_ = self.gds_validate_string(vValePed_, node, 'vValePed')
            self.vValePed = vValePed_
# end class disp


class CNPJForn(GeneratedsSuper):
    """CNPJ da empresa fornecedora do Vale-Pedágio- CNPJ da Empresa
    Fornecedora do Vale-Pedágio, ou seja, empresa que fornece ao
    Responsável pelo Pagamento do Vale-Pedágio os dispositivos do
    Vale-Pedágio. - Informar os zeros não significativos."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CNPJForn)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CNPJForn.subclass:
            return CNPJForn.subclass(*args_, **kwargs_)
        else:
            return CNPJForn(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CNPJForn', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CNPJForn')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CNPJForn')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CNPJForn', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CNPJForn'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CNPJForn', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CNPJForn


class nCompra(GeneratedsSuper):
    """Número do comprovante de compraNúmero de ordem do comprovante de
    compra do Vale-Pedágio fornecido para cada veículo ou combinação
    veicular, por viagem."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nCompra)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nCompra.subclass:
            return nCompra.subclass(*args_, **kwargs_)
        else:
            return nCompra(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nCompra', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nCompra')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nCompra')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nCompra', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nCompra'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nCompra', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nCompra


class infContratante(GeneratedsSuper):
    """Grupo de informações dos contratantes do serviço de transporte"""
    subclass = None
    superclass = None
    def __init__(self, CPF=None, CNPJ=None):
        self.original_tagname_ = None
        self.CPF = CPF
        self.CNPJ = CNPJ
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infContratante)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infContratante.subclass:
            return infContratante.subclass(*args_, **kwargs_)
        else:
            return infContratante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def get_CNPJ(self): return self.CNPJ
    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ
    def hasContent_(self):
        if (
            self.CPF is not None or
            self.CNPJ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infContratante', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infContratante')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infContratante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infContratante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infContratante'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infContratante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespace_, eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
# end class infContratante


class veicTracao(GeneratedsSuper):
    """Dados do Veículo com a Tração"""
    subclass = None
    superclass = None
    def __init__(self, cInt=None, placa=None, RENAVAM=None, tara=None, capKG=None, capM3=None, prop=None, condutor=None, tpRod=None, tpCar=None, UF=None):
        self.original_tagname_ = None
        self.cInt = cInt
        self.placa = placa
        self.RENAVAM = RENAVAM
        self.tara = tara
        self.capKG = capKG
        self.capM3 = capM3
        self.prop = prop
        if condutor is None:
            self.condutor = []
        else:
            self.condutor = condutor
        self.tpRod = tpRod
        self.tpCar = tpCar
        self.UF = UF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, veicTracao)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if veicTracao.subclass:
            return veicTracao.subclass(*args_, **kwargs_)
        else:
            return veicTracao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cInt(self): return self.cInt
    def set_cInt(self, cInt): self.cInt = cInt
    def get_placa(self): return self.placa
    def set_placa(self, placa): self.placa = placa
    def get_RENAVAM(self): return self.RENAVAM
    def set_RENAVAM(self, RENAVAM): self.RENAVAM = RENAVAM
    def get_tara(self): return self.tara
    def set_tara(self, tara): self.tara = tara
    def get_capKG(self): return self.capKG
    def set_capKG(self, capKG): self.capKG = capKG
    def get_capM3(self): return self.capM3
    def set_capM3(self, capM3): self.capM3 = capM3
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def get_condutor(self): return self.condutor
    def set_condutor(self, condutor): self.condutor = condutor
    def add_condutor(self, value): self.condutor.append(value)
    def insert_condutor_at(self, index, value): self.condutor.insert(index, value)
    def replace_condutor_at(self, index, value): self.condutor[index] = value
    def get_tpRod(self): return self.tpRod
    def set_tpRod(self, tpRod): self.tpRod = tpRod
    def get_tpCar(self): return self.tpCar
    def set_tpCar(self, tpCar): self.tpCar = tpCar
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def hasContent_(self):
        if (
            self.cInt is not None or
            self.placa is not None or
            self.RENAVAM is not None or
            self.tara is not None or
            self.capKG is not None or
            self.capM3 is not None or
            self.prop is not None or
            self.condutor or
            self.tpRod is not None or
            self.tpCar is not None or
            self.UF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='veicTracao', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('veicTracao')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='veicTracao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='veicTracao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='veicTracao'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='veicTracao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cInt is not None:
            self.cInt.export(outfile, level, namespace_, name_='cInt', pretty_print=pretty_print)
        if self.placa is not None:
            self.placa.export(outfile, level, namespace_, name_='placa', pretty_print=pretty_print)
        if self.RENAVAM is not None:
            self.RENAVAM.export(outfile, level, namespace_, name_='RENAVAM', pretty_print=pretty_print)
        if self.tara is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stara>%s</%stara>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tara), input_name='tara')), namespace_, eol_))
        if self.capKG is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scapKG>%s</%scapKG>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.capKG), input_name='capKG')), namespace_, eol_))
        if self.capM3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scapM3>%s</%scapM3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.capM3), input_name='capM3')), namespace_, eol_))
        if self.prop is not None:
            self.prop.export(outfile, level, namespace_, name_='prop', pretty_print=pretty_print)
        for condutor_ in self.condutor:
            condutor_.export(outfile, level, namespace_, name_='condutor', pretty_print=pretty_print)
        if self.tpRod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpRod>%s</%stpRod>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpRod), input_name='tpRod')), namespace_, eol_))
        if self.tpCar is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpCar>%s</%stpCar>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpCar), input_name='tpCar')), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UF), input_name='UF')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cInt':
            obj_ = None
            self.cInt = obj_
            obj_.original_tagname_ = 'cInt'
        elif nodeName_ == 'placa':
            obj_ = None
            self.placa = obj_
            obj_.original_tagname_ = 'placa'
        elif nodeName_ == 'RENAVAM':
            obj_ = None
            self.RENAVAM = obj_
            obj_.original_tagname_ = 'RENAVAM'
        elif nodeName_ == 'tara':
            tara_ = child_.text
            tara_ = self.gds_validate_string(tara_, node, 'tara')
            self.tara = tara_
        elif nodeName_ == 'capKG':
            capKG_ = child_.text
            capKG_ = self.gds_validate_string(capKG_, node, 'capKG')
            self.capKG = capKG_
        elif nodeName_ == 'capM3':
            capM3_ = child_.text
            capM3_ = self.gds_validate_string(capM3_, node, 'capM3')
            self.capM3 = capM3_
        elif nodeName_ == 'prop':
            obj_ = prop.factory()
            obj_.build(child_)
            self.prop = obj_
            obj_.original_tagname_ = 'prop'
        elif nodeName_ == 'condutor':
            obj_ = condutor.factory()
            obj_.build(child_)
            self.condutor.append(obj_)
            obj_.original_tagname_ = 'condutor'
        elif nodeName_ == 'tpRod':
            tpRod_ = child_.text
            tpRod_ = self.gds_validate_string(tpRod_, node, 'tpRod')
            self.tpRod = tpRod_
        elif nodeName_ == 'tpCar':
            tpCar_ = child_.text
            tpCar_ = self.gds_validate_string(tpCar_, node, 'tpCar')
            self.tpCar = tpCar_
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
# end class veicTracao


class cInt(GeneratedsSuper):
    """Código interno do veículo"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cInt)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cInt.subclass:
            return cInt.subclass(*args_, **kwargs_)
        else:
            return cInt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cInt', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cInt')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cInt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cInt', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cInt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cInt', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cInt


class placa(GeneratedsSuper):
    """Placa do veículo"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, placa)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if placa.subclass:
            return placa.subclass(*args_, **kwargs_)
        else:
            return placa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='placa', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('placa')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='placa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='placa', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='placa'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='placa', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class placa


class RENAVAM(GeneratedsSuper):
    """RENAVAM do veículo"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RENAVAM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RENAVAM.subclass:
            return RENAVAM.subclass(*args_, **kwargs_)
        else:
            return RENAVAM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RENAVAM', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RENAVAM')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RENAVAM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RENAVAM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RENAVAM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RENAVAM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RENAVAM


class tara(GeneratedsSuper):
    """Tara em KG"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tara)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tara.subclass:
            return tara.subclass(*args_, **kwargs_)
        else:
            return tara(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tara', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tara')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tara')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tara', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tara'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tara', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tara


class capKG(GeneratedsSuper):
    """Capacidade em KG"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, capKG)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if capKG.subclass:
            return capKG.subclass(*args_, **kwargs_)
        else:
            return capKG(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='capKG', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('capKG')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='capKG')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='capKG', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='capKG'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='capKG', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class capKG


class capM3(GeneratedsSuper):
    """Capacidade em M3"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, capM3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if capM3.subclass:
            return capM3.subclass(*args_, **kwargs_)
        else:
            return capM3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='capM3', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('capM3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='capM3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='capM3', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='capM3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='capM3', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class capM3


class prop(GeneratedsSuper):
    """Proprietários do Veículo. Só preenchido quando o veículo não
    pertencer à empresa emitente do MDF-e"""
    subclass = None
    superclass = None
    def __init__(self, CPF=None, CNPJ=None, RNTRC=None, xNome=None, IE=None, UF=None, tpProp=None):
        self.original_tagname_ = None
        self.CPF = CPF
        self.CNPJ = CNPJ
        self.RNTRC = RNTRC
        self.validate_TRNTRC(self.RNTRC)
        self.xNome = xNome
        self.IE = IE
        self.UF = UF
        self.tpProp = tpProp
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, prop)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if prop.subclass:
            return prop.subclass(*args_, **kwargs_)
        else:
            return prop(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def get_CNPJ(self): return self.CNPJ
    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ
    def get_RNTRC(self): return self.RNTRC
    def set_RNTRC(self, RNTRC): self.RNTRC = RNTRC
    def get_xNome(self): return self.xNome
    def set_xNome(self, xNome): self.xNome = xNome
    def get_IE(self): return self.IE
    def set_IE(self, IE): self.IE = IE
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def get_tpProp(self): return self.tpProp
    def set_tpProp(self, tpProp): self.tpProp = tpProp
    def validate_TRNTRC(self, value):
        # Validate type TRNTRC, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.CPF is not None or
            self.CNPJ is not None or
            self.RNTRC is not None or
            self.xNome is not None or
            self.IE is not None or
            self.UF is not None or
            self.tpProp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='prop', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('prop')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prop')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='prop', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='prop'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='prop', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespace_, eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespace_, eol_))
        if self.RNTRC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNTRC>%s</%sRNTRC>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RNTRC), input_name='RNTRC')), namespace_, eol_))
        if self.xNome is not None:
            self.xNome.export(outfile, level, namespace_, name_='xNome', pretty_print=pretty_print)
        if self.IE is not None:
            self.IE.export(outfile, level, namespace_, name_='IE', pretty_print=pretty_print)
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UF), input_name='UF')), namespace_, eol_))
        if self.tpProp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpProp>%s</%stpProp>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpProp), input_name='tpProp')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
        elif nodeName_ == 'RNTRC':
            RNTRC_ = child_.text
            RNTRC_ = self.gds_validate_string(RNTRC_, node, 'RNTRC')
            self.RNTRC = RNTRC_
            # validate type TRNTRC
            self.validate_TRNTRC(self.RNTRC)
        elif nodeName_ == 'xNome':
            obj_ = None
            self.xNome = obj_
            obj_.original_tagname_ = 'xNome'
        elif nodeName_ == 'IE':
            obj_ = None
            self.IE = obj_
            obj_.original_tagname_ = 'IE'
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
        elif nodeName_ == 'tpProp':
            tpProp_ = child_.text
            tpProp_ = self.gds_validate_string(tpProp_, node, 'tpProp')
            self.tpProp = tpProp_
# end class prop


class xNome(GeneratedsSuper):
    """Razão Social ou Nome do proprietário"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, xNome)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if xNome.subclass:
            return xNome.subclass(*args_, **kwargs_)
        else:
            return xNome(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='xNome', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('xNome')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='xNome')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='xNome', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='xNome'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='xNome', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class xNome


class IE(GeneratedsSuper):
    """Inscrição Estadual"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IE.subclass:
            return IE.subclass(*args_, **kwargs_)
        else:
            return IE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IE


class tpProp(GeneratedsSuper):
    """Tipo ProprietárioPreencher com: 0-TAC – Agregado; 1-TAC
    Independente; ou 2 – Outros."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpProp)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpProp.subclass:
            return tpProp.subclass(*args_, **kwargs_)
        else:
            return tpProp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpProp', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpProp')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpProp')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpProp', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpProp'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpProp', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpProp


class condutor(GeneratedsSuper):
    """Informações do(s) Condutor(s) do veículo"""
    subclass = None
    superclass = None
    def __init__(self, xNome=None, CPF=None):
        self.original_tagname_ = None
        self.xNome = xNome
        self.CPF = CPF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, condutor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if condutor.subclass:
            return condutor.subclass(*args_, **kwargs_)
        else:
            return condutor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_xNome(self): return self.xNome
    def set_xNome(self, xNome): self.xNome = xNome
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def hasContent_(self):
        if (
            self.xNome is not None or
            self.CPF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='condutor', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('condutor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='condutor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='condutor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='condutor'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='condutor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.xNome is not None:
            self.xNome.export(outfile, level, namespace_, name_='xNome', pretty_print=pretty_print)
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'xNome':
            obj_ = None
            self.xNome = obj_
            obj_.original_tagname_ = 'xNome'
        elif nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
# end class condutor


class tpRod(GeneratedsSuper):
    """Tipo de RodadoPreencher com: 01 - Truck; 02 - Toco; 03 - Cavalo
    Mecânico; 04 - VAN; 05 - Utilitário; 06 - Outros."""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpRod)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpRod.subclass:
            return tpRod.subclass(*args_, **kwargs_)
        else:
            return tpRod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpRod', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpRod')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpRod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpRod', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpRod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpRod', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpRod


class tpCar(GeneratedsSuper):
    """Tipo de CarroceriaPreencher com: 00 - não aplicável; 01 - Aberta; 02
    - Fechada/Baú; 03 - Granelera; 04 - Porta Container; 05 - Sider"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpCar)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpCar.subclass:
            return tpCar.subclass(*args_, **kwargs_)
        else:
            return tpCar(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpCar', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpCar')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpCar')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpCar', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpCar'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpCar', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpCar


class veicReboque(GeneratedsSuper):
    """Dados dos reboques"""
    subclass = None
    superclass = None
    def __init__(self, cInt=None, placa=None, RENAVAM=None, tara=None, capKG=None, capM3=None, prop=None, tpCar=None, UF=None):
        self.original_tagname_ = None
        self.cInt = cInt
        self.placa = placa
        self.RENAVAM = RENAVAM
        self.tara = tara
        self.capKG = capKG
        self.capM3 = capM3
        self.prop = prop
        self.tpCar = tpCar
        self.UF = UF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, veicReboque)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if veicReboque.subclass:
            return veicReboque.subclass(*args_, **kwargs_)
        else:
            return veicReboque(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cInt(self): return self.cInt
    def set_cInt(self, cInt): self.cInt = cInt
    def get_placa(self): return self.placa
    def set_placa(self, placa): self.placa = placa
    def get_RENAVAM(self): return self.RENAVAM
    def set_RENAVAM(self, RENAVAM): self.RENAVAM = RENAVAM
    def get_tara(self): return self.tara
    def set_tara(self, tara): self.tara = tara
    def get_capKG(self): return self.capKG
    def set_capKG(self, capKG): self.capKG = capKG
    def get_capM3(self): return self.capM3
    def set_capM3(self, capM3): self.capM3 = capM3
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def get_tpCar(self): return self.tpCar
    def set_tpCar(self, tpCar): self.tpCar = tpCar
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def hasContent_(self):
        if (
            self.cInt is not None or
            self.placa is not None or
            self.RENAVAM is not None or
            self.tara is not None or
            self.capKG is not None or
            self.capM3 is not None or
            self.prop is not None or
            self.tpCar is not None or
            self.UF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='veicReboque', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('veicReboque')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='veicReboque')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='veicReboque', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='veicReboque'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='veicReboque', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cInt is not None:
            self.cInt.export(outfile, level, namespace_, name_='cInt', pretty_print=pretty_print)
        if self.placa is not None:
            self.placa.export(outfile, level, namespace_, name_='placa', pretty_print=pretty_print)
        if self.RENAVAM is not None:
            self.RENAVAM.export(outfile, level, namespace_, name_='RENAVAM', pretty_print=pretty_print)
        if self.tara is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stara>%s</%stara>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tara), input_name='tara')), namespace_, eol_))
        if self.capKG is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scapKG>%s</%scapKG>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.capKG), input_name='capKG')), namespace_, eol_))
        if self.capM3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scapM3>%s</%scapM3>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.capM3), input_name='capM3')), namespace_, eol_))
        if self.prop is not None:
            self.prop.export(outfile, level, namespace_, name_='prop', pretty_print=pretty_print)
        if self.tpCar is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpCar>%s</%stpCar>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpCar), input_name='tpCar')), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.UF), input_name='UF')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cInt':
            obj_ = None
            self.cInt = obj_
            obj_.original_tagname_ = 'cInt'
        elif nodeName_ == 'placa':
            obj_ = None
            self.placa = obj_
            obj_.original_tagname_ = 'placa'
        elif nodeName_ == 'RENAVAM':
            obj_ = None
            self.RENAVAM = obj_
            obj_.original_tagname_ = 'RENAVAM'
        elif nodeName_ == 'tara':
            tara_ = child_.text
            tara_ = self.gds_validate_string(tara_, node, 'tara')
            self.tara = tara_
        elif nodeName_ == 'capKG':
            capKG_ = child_.text
            capKG_ = self.gds_validate_string(capKG_, node, 'capKG')
            self.capKG = capKG_
        elif nodeName_ == 'capM3':
            capM3_ = child_.text
            capM3_ = self.gds_validate_string(capM3_, node, 'capM3')
            self.capM3 = capM3_
        elif nodeName_ == 'prop':
            obj_ = prop.factory()
            obj_.build(child_)
            self.prop = obj_
            obj_.original_tagname_ = 'prop'
        elif nodeName_ == 'tpCar':
            tpCar_ = child_.text
            tpCar_ = self.gds_validate_string(tpCar_, node, 'tpCar')
            self.tpCar = tpCar_
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
# end class veicReboque


class codAgPorto(GeneratedsSuper):
    """Código de Agendamento no porto"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codAgPorto)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codAgPorto.subclass:
            return codAgPorto.subclass(*args_, **kwargs_)
        else:
            return codAgPorto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codAgPorto', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codAgPorto')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codAgPorto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='codAgPorto', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codAgPorto'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='codAgPorto', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class codAgPorto


class lacRodo(GeneratedsSuper):
    """Lacres"""
    subclass = None
    superclass = None
    def __init__(self, nLacre=None):
        self.original_tagname_ = None
        self.nLacre = nLacre
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, lacRodo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if lacRodo.subclass:
            return lacRodo.subclass(*args_, **kwargs_)
        else:
            return lacRodo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nLacre(self): return self.nLacre
    def set_nLacre(self, nLacre): self.nLacre = nLacre
    def hasContent_(self):
        if (
            self.nLacre is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='lacRodo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('lacRodo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='lacRodo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='lacRodo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='lacRodo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='lacRodo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nLacre is not None:
            self.nLacre.export(outfile, level, namespace_, name_='nLacre', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nLacre':
            obj_ = None
            self.nLacre = obj_
            obj_.original_tagname_ = 'nLacre'
# end class lacRodo


class nLacre(GeneratedsSuper):
    """Número do Lacre"""
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nLacre)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nLacre.subclass:
            return nLacre.subclass(*args_, **kwargs_)
        else:
            return nLacre(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nLacre', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nLacre')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nLacre')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nLacre', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nLacre'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nLacre', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nLacre


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rodo'
        rootClass = rodo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rodo'
        rootClass = rodo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rodo'
        rootClass = rodo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rodo'
        rootClass = rodo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from mdfeModalRodoviario import *\n\n')
        sys.stdout.write('import mdfeModalRodoviario as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "rodo"
]
